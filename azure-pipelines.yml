# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- feature/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '848a4b64-73c2-4ec3-865d-e6e315709327'
  imageRepository: 'webapp'
  containerRegistry: 'docregi.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: Agent-linux
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sudo apt update'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sudo apt-get -y install docker.io'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sudo chmod 666 /var/run/docker.sock'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: Staging
    environment:
      name: staging
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'sudo apt update'
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'sudo apt-get -y install docker.io'
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'sudo chmod 666 /var/run/docker.sock'
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker rm -f web-app-staging'
          - task: Docker@2
            displayName: 'Login to Registry'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'

          - task: CmdLine@2
            displayName: Pull image
            inputs:
              script: 'docker pull $(containerRegistry)/$(imageRepository):$(tag)'
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker run -d --name web-app-staging --restart unless-stopped  -p 8080:8080 stagingreg.azurecr.io/webapp:80'

          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker cp /home/omriganini/.env web-app-staging:/app'

          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker restart web-app-staging'
             
- stage: DeployToProduction
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Production
    displayName: Production
    environment:
      name: Production
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'sudo apt update'
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'sudo apt-get -y install docker.io'
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'sudo chmod 666 /var/run/docker.sock'
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker rm -f web-app-production'
          - task: Docker@2
            displayName: 'Login to Registry'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'

          - task: CmdLine@2
            displayName: Pull image
            inputs:
              script: 'docker pull $(containerRegistry)/$(imageRepository):$(tag)'
          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker run -d --name web-app-production --restart unless-stopped  -p 8080:8080 stagingreg.azurecr.io/webapp:80'

          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker cp /home/omriganini/.env web-app-production:/app'

          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker restart web-app-production'
